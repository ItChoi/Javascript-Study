/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.12
 * Generated at: 2019-11-03 07:37:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources.js.inside_002djavascript.chapter3;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chapter3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>인사이드 자바스크립트 3장 - 데이터 타입과 연산자</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("//숫자 타입\r\n");
      out.write("var intNum = 10;\r\n");
      out.write("var floatNum = 0.1;\r\n");
      out.write("console.log(\"intNum::: \", typeof intNum);\r\n");
      out.write("console.log(\"floatNum::: \", typeof floatNum);\r\n");
      out.write("\r\n");
      out.write("// 문자열 타입\r\n");
      out.write("var singleQuoteStr = 'single quote string';\r\n");
      out.write("var doubleQuoteStr = \"double quote string\";\r\n");
      out.write("var singleChar = 'a';\r\n");
      out.write("console.log(\"singleQuoteStr::: \", typeof singleQuoteStr);\r\n");
      out.write("console.log(\"doubleQuoteStr::: \", typeof doubleQuoteStr);\r\n");
      out.write("console.log(\"singleChar::: \", typeof singleChar);\r\n");
      out.write("\r\n");
      out.write("// 불린 타입\r\n");
      out.write("var boolVar = true;\r\n");
      out.write("console.log(\"boolVar::: \", typeof boolVar);\r\n");
      out.write("\r\n");
      out.write("// undefined 타입\r\n");
      out.write("var emptyVar;\r\n");
      out.write("console.log(\"emptyVar::: \", typeof emptyVar);\r\n");
      out.write("\r\n");
      out.write("// null 타입\r\n");
      out.write("var nullVar = null;\r\n");
      out.write("console.log(\"nullVar::: \", typeof nullVar);\r\n");
      out.write("\r\n");
      out.write("console.log(\"=========================================================================\");\r\n");
      out.write("\t\r\n");
      out.write("// 객체 생성\r\n");
      out.write("// 1. Object() 생성자 함수 이용\r\n");
      out.write("\tvar foo1 = new Object();\r\n");
      out.write("\t\r\n");
      out.write("\t// foo 객체 프로퍼티 생성\r\n");
      out.write("\tfoo1.name = 'foo1';\r\n");
      out.write("\tfoo1.age = 30;\r\n");
      out.write("\tfoo1.gender = 'male';\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"foo1 type of::: \", typeof foo1);\r\n");
      out.write("\tconsole.log(\"foo1::: \", foo1);\r\n");
      out.write("\t\r\n");
      out.write("// 2. 객체 리터럴 방식 이용\r\n");
      out.write("\tvar foo2 = {\r\n");
      out.write("\t\tname : 'foo2',\r\n");
      out.write("\t\tage : 32,\r\n");
      out.write("\t\tgender : 'male'\r\n");
      out.write("\t};\r\n");
      out.write("\tconsole.log(\"foo2 type of::: \", typeof foo2);\r\n");
      out.write("\tconsole.log(\"foo2::: \", foo2);\r\n");
      out.write("\r\n");
      out.write("// 3. 생성자 함수 이용 (4장에서 살펴봄)\r\n");
      out.write("// 객체 프로퍼티 읽기/쓰기/갱신\r\n");
      out.write("// - 객체 프로퍼티에 접근하기 위해서 2가지 방식을 사용한다.\r\n");
      out.write("\tvar foo3 = {\r\n");
      out.write("\t\tname : 'foo3',\r\n");
      out.write("\t\tmajor : 'computer science'\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\t// 객체 프로퍼티 읽기\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.name);\r\n");
      out.write("\tconsole.log(\"대괄호 표기법 읽기:::: \", foo3['name']);\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.nickname);\r\n");
      out.write("\t\r\n");
      out.write("\t// 객체 프로퍼티 갱신\r\n");
      out.write("\tfoo3.major = 'electronics engineering';\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.major);\r\n");
      out.write("\tconsole.log(\"대괄호 표기법 읽기:::: \", foo3['major']);\r\n");
      out.write("\r\n");
      out.write("\t// 대괄호 표기법만을 사용해야 할 경우\r\n");
      out.write("\tfoo3['full-name'] = 'foo bar';\r\n");
      out.write("\tconsole.log(\"대괄호 표기법 읽기:::: \", foo3['full-name']);\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.full-name);\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.full);\r\n");
      out.write("\tconsole.log(\"마침표 표기법 읽기:::: \", foo3.name);\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("// for in 문과 객체 프로퍼티 출력\r\n");
      out.write("\tvar foo4 = {\r\n");
      out.write("\t\tname : 'foo4',\r\n");
      out.write("\t\tage: 21,\r\n");
      out.write("\t\tmajor : 'computer science'\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tvar prop;\r\n");
      out.write("\tfor (prop in foo4) {\r\n");
      out.write("\t\tconsole.log(\"prop::: \", prop, \" / foo4[prop]::: \", foo4[prop]);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// 객체 프로퍼티 삭제\r\n");
      out.write("\tvar foo5 = {\r\n");
      out.write("\t\tname : 'foo5',\r\n");
      out.write("\t\tnickname : 'babo'\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"foo5 Nickname::: \", foo5.nickname);\r\n");
      out.write("\tdelete foo5.nickname;\r\n");
      out.write("\tconsole.log(\"foo5 Nickname::: \", foo5.nickname);\r\n");
      out.write("\t\r\n");
      out.write("\tdelete foo5;\r\n");
      out.write("\tconsole.log(\"foo5 name::: \", foo5.name);\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("// 객체 참조\r\n");
      out.write("\tvar objA = {\r\n");
      out.write("\t\tval : 40\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tvar objC = {\r\n");
      out.write("\t\tval : 50\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tvar objB = objA;\r\n");
      out.write("\tobjB.val = 20;\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"objA val::: \", objA.val);\r\n");
      out.write("\tconsole.log(\"objB val::: \", objB.val);\r\n");
      out.write("\tconsole.log(\"objC val::: \", objC.val);\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// 객체 비교\r\n");
      out.write("\tvar a = 100;\r\n");
      out.write("\tvar b = 100;\r\n");
      out.write("\t\r\n");
      out.write("\tvar objA = {\r\n");
      out.write("\t\t\tval : 100\t\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tvar objB = {\r\n");
      out.write("\t\t\tval : 100\t\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tvar objC = objB;\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"a == b::: \", a == b);\r\n");
      out.write("\tconsole.log(\"objA == objB::: \", objA == objB);\r\n");
      out.write("\tconsole.log(\"objB == objC::: \", objB == objC);\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("// 참조에 의한 함수 호출 방식\r\n");
      out.write("\tvar a = 100;\r\n");
      out.write("\tvar objA = {\r\n");
      out.write("\t\tval : 100\t\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tfunction changeArg(num, obj) {\r\n");
      out.write("\t\tnum = 200;\r\n");
      out.write("\t\tobj.val = 200;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconsole.log(\"num1::: \", num);\r\n");
      out.write("\t\tconsole.log(\"objA.val1::: \", obj.val);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tchangeArg(a, objA);\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"num2::: \", a);\r\n");
      out.write("\tconsole.log(\"obj.val2::: \", objA.val);\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// 배열\r\n");
      out.write("// 배열 리터럴을 통한 5가지 원소를 가진 배열 생성\r\n");
      out.write("\tvar colorArr = ['orange', 'yellow', 'blue', 'green', 'red'];\r\n");
      out.write("\tconsole.log(\"colorArr[0]::: \", colorArr[0]);\r\n");
      out.write("\tconsole.log(\"colorArr[1]::: \", colorArr[1]);\r\n");
      out.write("\tconsole.log(\"colorArr[4]::: \", colorArr[4]);\r\n");
      out.write("\r\n");
      out.write("\tvar testArr = [];\r\n");
      out.write("\ttestArr[8] = 1;\r\n");
      out.write("\tconsole.log(\"testArrLength::: \", testArr.length);\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// 배열과 객체\r\n");
      out.write("\tvar emptyArray = [];\r\n");
      out.write("\tvar emptyObj = {};\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.dir(emptyArray.__proto__);\r\n");
      out.write("\tconsole.dir(emptyArray._proto_);\r\n");
      out.write("\tconsole.dir(\"emptyObj.__proto__::: \", emptyObj.__proto__);\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("// 배열의 프로퍼티 동적 생성\r\n");
      out.write("\tconsole.log(\"===================================배열의 프로퍼티 동적 생성====================================\");\r\n");
      out.write("\tvar arr = ['zero', 'one', 'two'];\r\n");
      out.write("\tconsole.log(\"arr.length::: \", arr.length);\r\n");
      out.write("\t\r\n");
      out.write("\tarr.color = 'blue';\r\n");
      out.write("\tarr.name = 'number_array';\r\n");
      out.write("\tconsole.log(\"arr.length::: \", arr.length);\r\n");
      out.write("\t\r\n");
      out.write("\tarr[3] = 'red';\r\n");
      out.write("\tconsole.log(\"arr.length::: \", arr.length);\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.dir(arr);\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// splice(start, deleteCount, item...) 메서드\r\n");
      out.write("\tvar arr1 = ['zero', 'one', 'two', 'three'];\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"arr1.length1::: \", arr1.length);\r\n");
      out.write("\tarr1.splice(2, 1);\r\n");
      out.write("\tconsole.log(\"arr1::: \", arr1);\r\n");
      out.write("\tconsole.log(\"arr1.length2::: \", arr1.length);\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("// 유사 배열 객체\r\n");
      out.write("\tvar arr = ['bar'];\r\n");
      out.write("\tvar obj = {\r\n");
      out.write("\t\tname : 'foo',\r\n");
      out.write("\t\tlength : 1\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\tarr.push('bazzzz');\r\n");
      out.write("\tconsole.log(\"arr::: \", arr);\r\n");
      out.write("\t\r\n");
      out.write("\t// obj.push('bazzzz');\r\n");
      out.write("\tArray.prototype.push.apply(obj, ['baz']);\r\n");
      out.write("\tconsole.log(\"obj:::\", obj);\r\n");
      out.write("\t\r\n");
      out.write("// 기본 타입과 표준 메서드\r\n");
      out.write("\tvar num = 0.5;\r\n");
      out.write("\tconsole.log(\"num 메서드::: \", num.toExponential(1));\r\n");
      out.write("\t\r\n");
      out.write("\tconsole.log(\"문자열 charAt::: \", \"test\".charAt(2));\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
